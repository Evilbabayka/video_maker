#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
–ö–ª–∞—Å—Å VideoComposer –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞—É–¥–∏–æ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤

–ê–≤—Ç–æ—Ä: [@EvilBabayka]
–î–∞—Ç–∞: 2025
"""

import os
import logging
from pathlib import Path
from typing import List, Optional, Tuple
import random

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ (MoviePy 2.2.1)
try:
    from moviepy import (
        VideoFileClip,
        ImageClip,
        TextClip,
        AudioFileClip,
        CompositeVideoClip,
    )
    from moviepy import concatenate_videoclips, concatenate_audioclips
    from PIL import Image
    import pysrt
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install moviepy pillow pysrt")
    raise


class VideoComposer:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞—É–¥–∏–æ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    """

    def __init__(self, config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞

        Args:
            config (dict): –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–∏–∑ config.py)
        """
        self.config = config
        self.fps = config.get("fps", 24)
        self.resolution = config.get("resolution", (1024, 768))
        self.image_duration = config.get("image_duration", 4.0)
        self.zoom_enabled = config.get("zoom_enabled", True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        self.subtitle_fontsize = config.get("subtitle_fontsize", 50)
        self.subtitle_color = config.get("subtitle_color", "white")
        self.subtitle_position = config.get("subtitle_position", ("center", "bottom"))

        logging.info(f"VideoComposer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º {self.resolution}")

    def create_video(
        self,
        images_folder: str,
        audio_file: str,
        subtitles_file: Optional[str] = None,
        output_file: str = "output/result.mp4",
    ) -> bool:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ

        Args:
            images_folder: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            audio_file: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            subtitles_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            output_file: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ

        Returns:
            bool: True –µ—Å–ª–∏ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            logging.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")

            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print("üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            image_clips = self._process_images(images_folder)
            if not image_clips:
                logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False

            # 2. –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            print("üéûÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            video_clip = concatenate_videoclips(image_clips, method="compose")

            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
            print("üéµ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...")
            video_clip = self._add_audio(video_clip, audio_file)

            # 4. –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if subtitles_file and os.path.exists(subtitles_file):
                print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤...")
                video_clip = self._add_subtitles(video_clip, subtitles_file)

            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ...")
            self._save_video(video_clip, output_file)

            logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {output_file}")
            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}", exc_info=True)
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

    def _process_images(self, images_folder: str) -> List:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ–∫–ª–∏–ø—ã

        Args:
            images_folder: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

        Returns:
            List: —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ–∫–ª–∏–ø–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ
        image_files = []
        folder_path = Path(images_folder)

        for ext in image_extensions:
            image_files.extend(folder_path.glob(f"*{ext}"))
            image_files.extend(folder_path.glob(f"*{ext.upper()}"))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
        image_files.sort()

        if not image_files:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {images_folder}")
            return []

        print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")

        clips = []
        for i, image_file in enumerate(image_files):
            print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(image_files)}: {image_file.name}")

            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                clip = self._create_image_clip(str(image_file))
                if clip:
                    clips.append(clip)

            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_file}: {e}")
                continue

        return clips

    def _create_image_clip(self, image_path: str):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ–∫–ª–∏–ø –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∑—É–º–∞

        Args:
            image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

        Returns:
            ImageClip: –≥–æ—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ–∫–ª–∏–ø
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            resized_image = self._resize_image(image_path)

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∏–ø —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            clip = ImageClip(resized_image, duration=self.image_duration)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FPS —á–µ—Ä–µ–∑ with_fps (–Ω–æ–≤—ã–π API MoviePy 2.2.1)
            clip = clip.with_fps(self.fps)

            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑—É–º–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.zoom_enabled:
                clip = self._add_zoom_effect(clip)

            return clip

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ –∏–∑ {image_path}: {e}")
            return None

    def _resize_image(self, image_path: str) -> str:
        """
        –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π

        Args:
            image_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

        Returns:
            str: –ø—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if img.mode != "RGB":
                    img = img.convert("RGB")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                original_width, original_height = img.size
                target_width, target_height = self.resolution

                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                width_ratio = target_width / original_width
                height_ratio = target_height / original_height

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å —Ü–µ–ª–∏–∫–æ–º
                scale_ratio = min(width_ratio, height_ratio)

                # –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                new_width = int(original_width * scale_ratio)
                new_height = int(original_height * scale_ratio)

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä (–ò–°–ü–†–ê–í–õ–ï–ù–û: resize –≤–º–µ—Å—Ç–æ resized)
                resized_img = img.resize(
                    (new_width, new_height), resample=Image.Resampling.LANCZOS
                )

                # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                background = Image.new("RGB", (target_width, target_height), (0, 0, 0))

                # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                paste_x = (target_width - new_width) // 2
                paste_y = (target_height - new_height) // 2
                background.paste(resized_img, (paste_x, paste_y))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                temp_path = f"temp/resized_{Path(image_path).name}"
                os.makedirs("temp", exist_ok=True)
                background.save(temp_path, quality=95)

                return temp_path

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return image_path

    def _add_zoom_effect(self, clip):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑—É–º–∞ (Ken Burns effect) –∫ –≤–∏–¥–µ–æ–∫–ª–∏–ø—É

        Args:
            clip: –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥–µ–æ–∫–ª–∏–ø

        Returns:
            –≤–∏–¥–µ–æ–∫–ª–∏–ø —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∑—É–º–∞
        """
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑—É–º–∞
            zoom_factor = 1.2  # –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º (1.2 = –Ω–∞ 20%)

            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑—É–º–∞
            zoom_in = random.choice([True, False])

            if zoom_in:
                # –ó—É–º –≤–Ω—É—Ç—Ä—å (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
                start_scale = zoom_factor
                end_scale = 1.0
            else:
                # –ó—É–º –Ω–∞—Ä—É–∂—É (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
                start_scale = 1.0
                end_scale = zoom_factor

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
            def resize_func(t):
                progress = t / clip.duration
                current_scale = start_scale + (end_scale - start_scale) * progress
                return current_scale

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞–≤–Ω—ã–π –∑—É–º —á–µ—Ä–µ–∑ resize
            return clip.resized(resize_func)

        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∑—É–º–∞: {e}")
            return clip

    def _add_audio(self, video_clip, audio_file: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∫ –≤–∏–¥–µ–æ

        Args:
            video_clip: –≤–∏–¥–µ–æ–∫–ª–∏–ø
            audio_file: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É

        Returns:
            –≤–∏–¥–µ–æ–∫–ª–∏–ø —Å –∞—É–¥–∏–æ
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            audio_clip = AudioFileClip(audio_file)

            # –ü–æ–¥–≥–æ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            video_duration = video_clip.duration
            audio_duration = audio_clip.duration

            if audio_duration > video_duration:
                # –ê—É–¥–∏–æ –¥–ª–∏–Ω–Ω–µ–µ –≤–∏–¥–µ–æ - –æ–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ
                audio_clip = audio_clip.subclipped(0, video_duration)
                print(f"üéµ –ê—É–¥–∏–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ {video_duration:.1f} —Å–µ–∫—É–Ω–¥")

            elif audio_duration < video_duration:
                # –í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ –∞—É–¥–∏–æ - –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∏–ª–∏ –æ–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ
                if audio_duration * 2 >= video_duration:
                    # –ï—Å–ª–∏ –∞—É–¥–∏–æ –º–æ–∂–Ω–æ –∑–∞—Ü–∏–∫–ª–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 —Ä–∞–∑
                    loops_needed = int(video_duration / audio_duration) + 1
                    audio_clips = [audio_clip] * loops_needed
                    audio_clip = concatenate_audioclips(audio_clips).subclipped(
                        0, video_duration
                    )
                    print(f"üéµ –ê—É–¥–∏–æ –∑–∞—Ü–∏–∫–ª–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ")
                else:
                    # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –ø–æ–¥ –∞—É–¥–∏–æ
                    video_clip = video_clip.subclipped(0, audio_duration)
                    print(f"üéûÔ∏è –í–∏–¥–µ–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ {audio_duration:.1f} —Å–µ–∫—É–Ω–¥")

            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∫ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º with_audio (MoviePy 2.2.1)
            final_clip = video_clip.with_audio(audio_clip)

            return final_clip

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            print(f"‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É–¥–∏–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            return video_clip

    def _add_subtitles(self, video_clip, subtitles_file: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –≤–∏–¥–µ–æ

        Args:
            video_clip: –≤–∏–¥–µ–æ–∫–ª–∏–ø
            subtitles_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (.srt)

        Returns:
            –≤–∏–¥–µ–æ–∫–ª–∏–ø —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
            subtitles = pysrt.open(subtitles_file, encoding="utf-8")

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–ø–æ–≤
            subtitle_clips = []

            for subtitle in subtitles:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ SRT –≤ —Å–µ–∫—É–Ω–¥—ã
                start_time = self._srt_time_to_seconds(subtitle.start)
                end_time = self._srt_time_to_seconds(subtitle.end)
                duration = end_time - start_time

                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–ª–∏–ø
                try:
                    text_clip = (
                        TextClip(
                            subtitle.text,
                            fontsize=self.subtitle_fontsize,
                            color=self.subtitle_color,
                            font="Arial",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            method="caption",
                            size=(self.resolution[0] - 100, None),  # –û—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º
                        )
                        .with_duration(duration)
                        .with_start(start_time)
                        .with_position(self.subtitle_position)
                    )

                    subtitle_clips.append(text_clip)

                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–∞ '{subtitle.text}': {e}")
                    continue

            if subtitle_clips:
                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤–∏–¥–µ–æ
                final_clip = CompositeVideoClip([video_clip] + subtitle_clips)
                print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(subtitle_clips)}")
                return final_clip
            else:
                print("‚ö†Ô∏è –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
                return video_clip

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            print(f"‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            return video_clip

    def _srt_time_to_seconds(self, srt_time) -> float:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ SRT –≤ —Å–µ–∫—É–Ω–¥—ã

        Args:
            srt_time: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ pysrt

        Returns:
            float: –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        return (
            srt_time.hours * 3600
            + srt_time.minutes * 60
            + srt_time.seconds
            + srt_time.milliseconds / 1000.0
        )

    def _save_video(self, video_clip, output_file: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª

        Args:
            video_clip: –≥–æ—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ–∫–ª–∏–ø
            output_file: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(output_file), exist_ok=True)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            codec = self.config.get("video_codec", "libx264")
            audio_codec = self.config.get("audio_codec", "aac")
            bitrate = self.config.get("video_bitrate", "2000k")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
            video_clip.write_videofile(
                output_file,
                fps=self.fps,
                codec=codec,
                audio_codec=audio_codec,
                bitrate=bitrate,
                # verbose=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ FFmpeg
                # logger=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ MoviePy
                temp_audiofile="temp/resultTEMP_MPY_wvf_snd.mp4"
            )

            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            raise

        finally:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            video_clip.close()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_video_composer():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VideoComposer"""

    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_config = {
        "fps": 24,
        "resolution": (1024, 768),
        "image_duration": 4.0,
        "zoom_enabled": True,
        "subtitle_fontsize": 50,
        "subtitle_color": "white",
        "subtitle_position": ("center", "bottom"),
        "video_codec": "libx264",
        "audio_codec": "aac",
        "video_bitrate": "2000k",
    }

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    composer = VideoComposer(test_config)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    success = composer.create_video(
        images_folder="examples/sample_images/",
        audio_file="examples/sample_audio.mp3",
        subtitles_file="examples/sample_subtitles.srt",
        output_file="output/test_video.mp4",
    )

    if success:
        print("üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")

    return success


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞
    test_video_composer()
